#create some values
xs<- seq(0, 4, len = 20)
#create some values
xs<- seq(0, 4, len = 20); xs
#create some values
xs<- seq(0, 4, len = 2); xs
0
#create some values
xs<- seq(0, 4, len = 20); xs
#plot the function
plot(xs, f(xs), type = 'l', ylab = '1.2(x-2)^2+3.2')
f<- function(x){
1.2 * (x-2)^2 + 3.2
}
#plot the function
plot(xs, f(xs), type = 'l', ylab = '1.2(x-2)^2+3.2')
#plot the function
plot(xs, f(xs), type = 'l', xlab = 'x', ylab = '1.2(x-2)^2+3.2')
#calculate the gradient df/dx
grad<- function(x){
1.2*2*(x-2)
}
lines(c(2, 2), c(3, 8), col = 'red', lty = 2)
lines(c(2, 2), c(0, 8), col = 'red', lty = 2)
text(2.1, 7, 'closedform_solution', col = 'red', pos = 4)
text(2, 7, 'closedform_solution', col = 'red', pos = 4)
#gradient descent implementation
#initialize the first guess for x<- value
x<- 0.1
#store x-values for graphing purpose
xtrace<- x
#store y-values for graphing purposes
ftrace<- f(x)
alpha<- 0.6
#create some values
xs<- seq(0, 4, len = 20); xs
for (step in 1:100) {
print(step)
}
for (step in 1:100) {
#print(step)
x<- x - alpha * grad(x)
xtrace<- c(xtrace, x)
ftrace<- c(ftrace, f(x))
}
lines(xtrace, ftrace, col = 'red', lty = 2)
text(0.5, 6, 'Gradient descent', col = 'red', pos = 4)
print(x)
x<- seq(-5, 5, length.out = 200)
x<- seq(-5, 5, length.out = 200); x
#function for the expression
myfunc<- expression(5* x^3 - 7 * X^2 - 40*x + 100)
#function for the expression
myfunc<- expression(5* x^3 - 7 * X^2 - 40*x + 100); myfunc
#get the first derivative
deriv1<- D(myfunc, 'x')
#get the first derivative
deriv1<- D(myfunc, 'x'); deriv1
myfunc
#function for the expression
myfunc<- expression(5* x^3 - 7 * X^2 - 40*x + 100); myfunc
#get the first derivative
deriv1<- D(myfunc, 'x'); deriv1
#second derivative
deriv2<- D(deriv1, 'x'); deriv2
#function for the expression
myfunc<- expression((5* x^3) - (7 * X^2) - 40*x + 100); myfunc
#get the first derivative
deriv1<- D(myfunc, 'x'); deriv1
#second derivative
deriv2<- D(deriv1, 'x'); deriv2
#plot the function
y<- eval(myfunc)
x<- seq(-5, 5, length.out = 200); x
#plot the function
y<- eval(myfunc)
x<- seq(-5, 5, length.out = 200); x
#plot the function
y<- eval(myfunc)
library(XLConnect)
install.packages('XLConnect')
library(XLConnect)
library('XLConnect')
install.packages('XLConnetJars')
library(XLConnect)
library(XLConnect)
library(XLConnect)
install.packages('XLConnect')
library(XLConnect)
install.packages('XLConnectJars')
library(XLConnect)
library(tidyverse)
library(cluster)
library(factoextra)
#set the working directory
setwd('D:\\GIT PROJECT\\CLUSTERING\\datasets')
dataset = read.csv('df_Wilms.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
df<- df[, 1:250]
df<- data.frame(df)
df$X5comp.1<- NULL
df$X5comp.2<- NULL
df$X5comp<- NULL
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
install.packages("fpc")
install.packages("dbscan")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
####
#final cluster using 4clusters
kfinal<- kmeans(df, centers = 2, nstart = 25); kfinal
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_CC: Clustered data with respect to Device name containing 2clusters")
dataset = read.csv('df_Mea.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
View(df)
View(df)
#scale the dataset
df<- scale(df)
is.na(df)
df<- data.frame(df)
#df$X5comp.1<- NULL
#df$X5comp.2<- NULL
df$X5comp<- NULL
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
####
#final cluster using 4clusters
kfinal<- kmeans(df, centers = 2, nstart = 25); kfinal
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_Mea: Clustered data with respect to Device name containing 2clusters")
dataset = read.csv('df_Poes.csv', sep = ',', header = TRUE)
dataset = read.csv('df_Peos.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
####
#final cluster using 4clusters
kfinal<- kmeans(df, centers = 2, nstart = 25); kfinal
####
#final cluster using 4clusters
kfinal<- kmeans(df, centers = 4, nstart = 25); kfinal
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_Peos: Clustered data with respect to Device name containing 4clusters")
library(tidyverse)
library(cluster)
library(factoextra)
#set the working directory
setwd('D:\\GIT PROJECT\\CLUSTERING\\datasets')
dataset = read.csv('df_Wilms.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
df<- df[, 1:250]
df<- data.frame(df)
df$X5comp.1<- NULL
df$X5comp.2<- NULL
df$X5comp<- NULL
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
####
#final cluster using 4clusters
kfinal<- kmeans(df, centers = 2, nstart = 25); kfinal
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_Wilms: Clustered data with respect to Device name containing 2clusters")
dataset = read.csv('df_BR.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
fviz_cluster(k2, data = df)
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_BR: Clustered data with respect to Device name containing 4clusters")
####
#final cluster using 4clusters
kfinal<- kmeans(df, centers = 4, nstart = 25); kfinal
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_BR: Clustered data with respect to Device name containing 4clusters")
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_BR: Clustered data with respect to Device name containing 4clusters")
fviz_cluster(kfinal, data = df) + ggtitle("Sheet df_BR: Clustered data with respect to Device name containing 4clusters")
grid.arrange(p1, p2, p3, p4, nrow = 2)
##########################################
#
#Using DBSCAN
#
#############################################
library("fpc")
db <- fpc::dbscan(df, eps = 0.15, MinPts = 5)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.15, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.5, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.15, MinPts = 1)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.15, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.4, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.01, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- fpc::dbscan(df, eps = 0.1, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- dbscan(df, eps = 0.1, MinPts = 2)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "ellipse")
fviz_cluster(db, df, stand = FALSE, frame = FALSE)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- dbscan(df, eps = 0.1, MinPts = 3)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
db <- dbscan(df, eps = 0.1, MinPts = 5)
fviz_cluster(db, df, stand = FALSE, frame = FALSE, geom = "point")
##########################################
#
#Using DBSCAN
#
#############################################
corr(df)
##########################################
#
#Using DBSCAN
#
#############################################
cor(df)
##########################################
#
#Using DBSCAN
#
#############################################
pairs(df)
dataset = read.csv('df_BR.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#use standardized scalling in R
normFunc <- function(x)
{
(x-mean(x, na.rm = T))/sd(x, na.rm = T)
}
df2<- normFunc(df)
#use standardized scalling in R
normFunc <- function(x)
{
(x-mean(x, na.rm = T))/sd(x)
}
df2<- normFunc(df)
dataset = read.csv('df_BR.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dataset = read.csv('df_Mea.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
is.na(df)
df<- data.frame(df)
#df$X5comp.1<- NULL
#df$X5comp.2<- NULL
df$X5comp<- NULL
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dataset = read.csv('df_Peos.csv', sep = ',', header = TRUE)
#device<- dataset[, 2]; device
row.names(dataset)<- dataset[, 2]
df<- dataset[, 3:254]
#scale the dataset
df<- scale(df)
df<- df[, 1:250]
df<- data.frame(df)
df$X5comp.1<- NULL
df$X5comp.2<- NULL
df$X5comp<- NULL
#get the distance function
distance<- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#set seed
set.seed(123)
#perform kmeans on the dataset
k2<- kmeans(df, centers = 2, nstart = 25); k2
fviz_cluster(k2, data = df)
#finding the optimum clusters
fviz_nbclust(df, kmeans, method = 'silhouette')
#multiple clustering results
k3 <- kmeans(df, centers = 3, nstart = 25)
k4 <- kmeans(df, centers = 4, nstart = 25)
k5 <- kmeans(df, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = df) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = df) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = df) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = df) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
